# This is a basic workflow that is manually triggered

name: Manual Release

on: 
  workflow_dispatch:
    inputs:
      bumpPart:
        description: 'Bump part (major, minor or patch)'
        required: true
        default: "minor"
      notes:
        description: 'Changelog notes'
        required: false

jobs:
  build:
      name: Build app
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        
        - name: Packaging app
          run: |
            mkdir dist
            tar -zcvf dist/demo-splunkapp.tgz package/

  tag-version:
    name: Tag Version
    runs-on: ubuntu-latest
    outputs:
      old_version: ${{ steps.bumpversion.outputs.old_ver }}
      version: ${{ steps.bumpversion.outputs.new_ver }}
    # Validate bump part before moving forward 
    if: contains(['major', 'minor', 'patch'], ${{ github.event.inputs.bumpPart }})
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Bump version and push tag
        id: bumpversion
        uses: jaumann/github-bumpversion-action@v0.0.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: ${{ github.event.inputs.bumpPart }}
      # - name: Testing bumping
      #   run: |
      #     echo "Old version: ${{ steps.bumpversion.outputs.old_ver }}"
      #     echo "New version: ${{ steps.bumpversion.outputs.new_ver }}"
      #     echo "Bump type: ${{ steps.bumpversion.outputs.part }}"
      - name: Push
        run: |
          remote_repo="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git push "${remote_repo}" HEAD:${GITHUB_REF} --follow-tags --tags

  release:
    name: Create Release
    needs: 
      - build
      - tag-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Fetch all tags
        run: |
          git fetch --unshallow --tags

      - name: Build changelog message
        id: changelog
        run: |
          content=$(git log v${{ needs.tag-version.outputs.old_version }}..v${{ needs.tag-version.outputs.version }} --oneline --decorate --pretty=format:"%s" | tail -n 1)
          content="${content//'%'/%25}"
          content="${content//$'\n'/%0A}"
          content="${content//$'\r'/%0D}"
          echo "::set-output name=message::${content}"

      # - name: Testing changelog
      #   run: echo "${{ steps.changelog.outputs.message }}"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.tag-version.outputs.version }}
          release_name: v${{ needs.tag-version.outputs.version }}
          body: |
            ## Changelog
            ${{ github.event.inputs.notes }}

            ${{ steps.changelog.outputs.message }}
          draft: false
          prerelease: false

      - name: Test package availability
        run: |
          ls -la 
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/demo-splunkapp.tgz
          asset_name: demo-splunkapp.tgz
          asset_content_type: application/tgz
  
  publish:
    needs: release
    name: Deploy Release to Splunkbase
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder for publish
        run: |
          echo "Placeholder for Splunkbase upload"